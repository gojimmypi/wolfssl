name: Build for .NET 3.5

on:
  push:
    branches:
      - dev-35  # Trigger only on commits to dev-35 in your repo
  pull_request:
    branches:
      - dev-35
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019  # .NET 3.5 is available here

    steps:
      - name: Checkout Repository (dev-35 branch)
        uses: actions/checkout@v3
        with:
          ref: dev-35  # Ensures correct branch is checked out

      - name: Ensure Visual Studio project files are UTF-8 with CRLF
        shell: bash
        run: |
          echo "Checking encoding..."

          # initialize error counter to display all failures, then exit if non-zero
          errors=0

          for file in $(git ls-files '*.vcxproj' '*.csproj' '*.sln'); do
            encoding=$(file -bi "$file" | grep -o 'charset=.*' | cut -d= -f2)
            if [ "$encoding" != "utf-8" ]; then
              # echo "❌ ERROR: $file is not UTF-8 encoded"
              echo -e "\033[33m⚠️ WARNING: $file is not UTF-8 encoded!\033[0m"
              errors=$((errors+1))
            else
              echo "✅ $file is UTF-8 encoded"
            fi
          done

          echo "Checking line endings..."
          for file in $(git ls-files '*.vcxproj' '*.csproj' '*.sln'); do
            if grep -IL . "$file"; then
              # check for binary encoding, including UTF-* with BOM
              # echo "❌ ERROR: $file contains non-text content"
              echo -e "\033[33m⚠️ WARNING:  $file contains non-text content!\033[0m"
              errors=$((errors + 1))
            else
                # grep -P will fail for UTF-8 with BOM, so only check CRLF here:
                if ! grep -qP '\r\n' "$file"; then
                  # echo "❌ERROR: $file does not have CRLF line endings"
                  echo -e "\033[33m⚠️ WARNING: $file does not have CRLF line endings!\033[0m"
                  errors=$((errors + 1))
                else
                  echo "✅ $file has correct CRLF line endings"
                fi
            fi
          done

          if [ "$errors" -gt 0 ]; then
            echo -e "\n=== Validation failed: Found $errors issue(s) in project files ==="
            echo "Not exiting with error, but please update files soon."
            # exit 1
          else
            echo "All Visual Studio files are correctly formatted."
          fi

      - name: Checkout wolfSSL (dev-35 branch)
        uses: actions/checkout@v3
        with:
          repository: gojimmypi/wolfssl
          ref: dev-35
          path: wolfssl  # Clone wolfSSL into the "wolfssl" subdirectory

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

        # wolfssl core
      - name: Build wolfSSL (DLL Debug, x64)
        working-directory: wolfssl
        run: |
          msbuild wolfssl.vcxproj /p:Configuration="DLL Debug" /p:Platform=x64 /p:PlatformToolset=v142 /m /verbosity:normal
        shell: cmd

        # C# Wrapper
      - name: Build wolfSSL_CSharp
        working-directory: wrapper/CSharp/wolfSSL_CSharp
        run: msbuild wolfSSL_CSharp.csproj /p:TargetFrameworkVersion=v3.5

        # wolfCrypt-Test
      - name: Build wolfCrypt-Test
        working-directory: wrapper/CSharp/wolfCrypt-Test
        run: msbuild wolfCrypt-Test.csproj /p:TargetFrameworkVersion=v3.5

        # DTLS
        # TODO wolfSSL-DTLS-Client
      - name: Build wolfSSL-DTLS-Server
        working-directory: wrapper/CSharp/wolfSSL-DTLS-Server
        run: msbuild wolfSSL-DTLS-Server.csproj /p:TargetFrameworkVersion=v3.5

        # DTLS-PSK
        # TODO wolfSSL-DTLS-PSK-Client
      - name: Build wolfSSL-DTLS-PSK-Server
        working-directory: wrapper/CSharp/wolfSSL-DTLS-PSK-Server
        run: msbuild wolfSSL-DTLS-PSK-Server.csproj /p:TargetFrameworkVersion=v3.5

        # TLS
      - name: Build wolfSSL-TLS-Client
        working-directory: wrapper/CSharp/wolfSSL-TLS-Client
        run: msbuild wolfSSL-TLS-Client.csproj /p:TargetFrameworkVersion=v3.5

      - name: Build wolfSSL-TLS-Server
        working-directory: wrapper/CSharp/wolfSSL-TLS-Server
        run: msbuild wolfSSL-TLS-Server.csproj /p:TargetFrameworkVersion=v3.5

      - name: Build wolfSSL-TLS-ServerThreaded
        working-directory: wrapper/CSharp/wolfSSL-TLS-ServerThreaded
        run: msbuild wolfSSL-TLS-ServerThreaded.csproj /p:TargetFrameworkVersion=v3.5

        # TLS PSK
      - name: Build wolfSSL-TLS-PSK-Client
        working-directory: wrapper/CSharp/wolfSSL-TLS-PSK-Client
        run: msbuild wolfSSL-TLS-PSK-Client.csproj /p:TargetFrameworkVersion=v3.5

      - name: Build wolfSSL-TLS-PSK-Server
        working-directory: wrapper/CSharp/wolfSSL-TLS-PSK-Server
        run: msbuild wolfSSL-TLS-PSK-Server.csproj /p:TargetFrameworkVersion=v3.5

        # Example-IOCallbacks
      - name: Build wolfSSL-Example-IOCallbacks
        working-directory: wrapper/CSharp/wolfSSL-Example-IOCallbacks
        run: msbuild wolfSSL-Example-IOCallbacks.csproj /p:TargetFrameworkVersion=v3.5
